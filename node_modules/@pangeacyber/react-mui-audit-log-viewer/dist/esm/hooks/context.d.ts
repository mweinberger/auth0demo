import React, { FC, Dispatch, SetStateAction } from "react";
import { Audit } from "../types";
import { PublishedRoots } from "../utils/arweave";
export interface Pagination {
    last: string;
    history: string[];
}
interface AuditContextShape {
    root?: Audit.Root;
    unpublishedRoot?: Audit.Root;
    visibilityModel?: Partial<Record<keyof Audit.Event, boolean>>;
    visibility: Partial<Record<keyof Audit.Event, boolean>>;
    order: string[];
    setOrder: Dispatch<SetStateAction<string[]>>;
    setVisibility: (update: Partial<Record<keyof Audit.Event, boolean>>) => void;
    proofs?: Record<string, boolean>;
    setProofs: Dispatch<SetStateAction<Record<string, boolean>>>;
    consistency?: Record<string, boolean>;
    setConsistency: Dispatch<SetStateAction<Record<string, boolean>>>;
    publishedRoots?: PublishedRoots;
    rowToLeafIndex?: Record<string, {
        leaf_index?: string;
    }>;
    offset: number;
    setOffset: Dispatch<SetStateAction<number>>;
    limit: number;
    limitOptions: number[];
    setLimit: Dispatch<SetStateAction<number>>;
    resultsId: string | undefined;
    total: number;
    fetchResults: (body: Audit.ResultRequest) => Promise<void>;
    consistencyRef?: any;
    isVerificationCheckEnabled?: boolean;
}
declare const AuditContextProvider: FC<{
    total: number;
    resultsId: string | undefined;
    fetchResults: (body: Audit.ResultRequest) => Promise<void>;
    limit?: number;
    limitOptions?: number[];
    root?: Audit.Root;
    unpublishedRoot?: Audit.Root;
    publishedRoots?: PublishedRoots;
    rowToLeafIndex?: Record<string, {
        leaf_index?: string;
    }>;
    visibilityModel?: Partial<Record<keyof Audit.Event, boolean>>;
    children?: React.ReactNode;
    isVerificationCheckEnabled?: boolean;
}>;
export declare const useAuditContext: () => AuditContextShape;
export declare const usePagination: () => {
    hasPagination: boolean;
    page: number;
    pageSize: number;
    rowCount: number;
    onPageChange: (page: number) => void;
    totalPages: number;
    hasNext: boolean;
    hasPrevious: boolean;
    offset: number;
    onPageSizeChange: (pageSize: number) => void;
    rowsPerPageOptions: number[];
};
export declare const useConsitency: (record: Audit.FlattenedAuditRecord, idx?: number) => {
    isConsistent: boolean;
    isConsistentWithNext: boolean;
    isConsistentWithPrevious: boolean;
    transactionId?: string | undefined;
    root?: Audit.Root | undefined;
};
export declare const useVerification: (record: Audit.FlattenedAuditRecord, idx?: number) => {
    isMembershipValid: boolean;
    isPendingVerification: boolean;
    isConsistentWithPrevious: boolean;
    isConsistentWithNext: boolean;
    transactionId?: string | undefined;
    isConsistent: boolean;
    root?: Audit.Root | undefined;
    unpublishedRoot?: Audit.Root | undefined;
};
export default AuditContextProvider;
