export declare namespace Audit {
    interface Config {
        id: string;
        retention: string;
        hotstorage: string;
    }
    interface Event {
        action?: string;
        actor?: string;
        message?: string;
        status?: string;
        source?: string;
        new?: string;
        old?: string;
        target?: string;
        received_at?: string;
    }
    interface Envelope {
        event: Event;
        received_at?: string;
        public_key?: string;
        signature?: string;
    }
    interface AuditRecord {
        envelope: Envelope;
        leaf_index?: string;
        membership_proof?: string;
        hash?: string;
        published?: boolean;
    }
    interface FlattenedAuditRecord extends AuditRecord, Envelope, Event {
        id: number;
    }
    interface VerificationArtifact {
        envelope: {
            event?: {
                action?: string;
                actor?: string;
                message?: string;
                status?: string;
                source?: string;
                new?: string;
                old?: string;
            };
            received_at?: string;
            public_key?: string;
            signature?: string;
        };
        hash?: string;
        leaf_index?: string;
        root?: Root;
        unpublished_root?: Root;
    }
    interface Root {
        url: string;
        published_at: string;
        size: number;
        root_hash: string;
        consistency_proof: string[];
        tree_name: string;
        transactionId?: string;
    }
    type AuditRecords = AuditRecord[];
    type LogRequest = AuditRecord;
    interface LogResponse {
        loggedCount: number;
    }
    interface SearchRequest {
        query: string;
        start?: string;
        end?: string;
        search_restriction?: {
            sources?: string[];
            actor?: string[];
            target?: string[];
        };
        order_by?: string;
        order?: string;
        limit?: number;
        verbose?: boolean;
    }
    interface ResultRequest {
        id: string;
        offset?: number;
        limit?: number;
    }
    interface RootRequest {
        tree_size?: number;
    }
    interface SearchResponse {
        id: string;
        count: number;
        events: AuditRecord[];
        expires_at: string;
        root?: Root;
        unpublished_root?: Root;
    }
    interface ResultResponse {
        events: AuditRecord[];
        count: number;
        root?: Root;
        unpublished_root?: Root;
    }
    interface RootResponse extends Root {
    }
}
