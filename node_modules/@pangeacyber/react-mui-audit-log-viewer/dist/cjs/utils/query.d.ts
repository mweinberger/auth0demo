import { Audit } from "../types";
export interface AuditQuery {
    after?: string;
    before?: string;
    since?: string;
    active?: "after" | "before" | "between" | "since";
    actor?: string;
    action?: string;
    message?: string;
    new?: string;
    old?: string;
    status?: string;
    target?: string;
}
interface AfterRange {
    type: "after";
    after: string;
}
interface BeforeRange {
    type: "before";
    before: string;
}
interface BetweenRange {
    type: "between";
    after: string;
    before: string;
}
interface SinceRange {
    type: "relative";
    since: string;
}
declare type AuditQueryRange = SinceRange | BetweenRange | BeforeRange | AfterRange;
interface QueryObj {
    type: "object";
    actor?: string;
    action?: string;
    message?: string;
    new?: string;
    old?: string;
    status?: string;
    target?: string;
}
interface QueryString {
    type: "string";
    value: string;
}
export interface PublicAuditQuery {
    range?: AuditQueryRange;
    query?: QueryObj | QueryString;
}
export interface Sort {
    order: string;
    order_by: string;
}
interface UseAuditQuery {
    body: Audit.SearchRequest | null;
    query: string;
    queryObj: AuditQuery | null;
    setQuery: (query: string) => void;
    setQueryObj: (queryObj: AuditQuery) => void;
    sort?: Sort;
    setSort: (sort?: Sort) => void;
}
export declare const useAuditQuery: (limit: number, auditQuery?: PublicAuditQuery | undefined) => UseAuditQuery;
export {};
