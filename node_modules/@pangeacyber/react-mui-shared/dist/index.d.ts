/// <reference types="react" />
import * as react from 'react';
import react__default, { FC, ReactNode, MouseEvent, MutableRefObject } from 'react';
import { GridValidRowModel, GridColDef, GridRowParams, MuiEvent, DataGridProps } from '@mui/x-data-grid';
import { InputProps, ChipProps, ButtonProps } from '@mui/material';
import { PopperPlacementType } from '@mui/base';
import { SxProps } from '@mui/system';

interface ConditionalOption {
    match: (current: string, previous: string) => boolean;
    options: {
        value: string;
        label: string;
    }[];
}
interface ConditionalAutocompleteProps {
    value: any;
    onChange: (value: any) => void;
    options: ConditionalOption[];
    size?: "small" | "medium";
    InputProps?: InputProps;
    placeholder?: string;
    hideMenu?: boolean;
    onOpen?: (open: boolean) => void;
}
/**
 * ConditionalAutocomplete is a wrapper around MUI Autocomplete to allow or conditional options.
 *
 * Conditional options allows users to provide a match function that can work off of the currently
 *  viewed word along with the previous word to determine whether or not those options should be set on
 *  Autocomplete. Letting the users autocomplete
 */
declare const ConditionalAutocomplete: react.ForwardRefExoticComponent<ConditionalAutocompleteProps & react.RefAttributes<any>>;

interface PreviewPanelProps<DataType> {
    onClose: () => void;
    data: DataType;
}
declare type PreviewPanel<DataType = any> = FC<PreviewPanelProps<DataType>>;

interface FilterOption {
    label: string;
    type?: "string";
}
interface FilterOptions<FiltersObj> {
    [key: string]: FilterOption;
}
interface FilterFormComponentProps<FiltersObj> {
    filters: FiltersObj;
    options: FilterOptions<FiltersObj>;
    onFilterChange: (filter: FiltersObj) => void;
}
interface FilterFormProps<FiltersObj> {
    filters: FiltersObj;
    options: FilterOptions<FiltersObj>;
    FiltersFormComponent?: FC<FilterFormComponentProps<FiltersObj>>;
    onFilterChange: (filter: FiltersObj) => void;
    showFilterChips?: boolean;
    ChipProps?: ChipProps;
}

interface PangeaDataGridProps<DataType extends GridValidRowModel, FiltersObj = Record<string, string>> {
    header?: ReactNode;
    columns: GridColDef[];
    data: DataType[];
    loading?: boolean;
    ColumnCustomization?: {
        visibilityModel: Record<string, boolean>;
    };
    ServerPagination?: {
        page: number;
        pageSize: number;
        paginationRowCount?: number;
        rowCount: number;
        onPageChange: (page: number) => void;
        onPageSizeChange?: (pageSize: number) => void;
        rowsPerPageOptions?: number[];
        maxResults?: number;
        onMaxResultChange?: (maxResults: number) => void;
        maxResultOptions?: number[];
    };
    Search?: {
        query?: string;
        placeholder?: string;
        onChange: (query: string) => void;
        conditionalOptions?: ConditionalOption[];
        Filters?: FilterFormProps<FiltersObj>;
    };
    ActionColumn?: {
        render: (object: DataType) => ReactNode;
        GridColDef?: Partial<GridColDef>;
    };
    ExpansionRow?: {
        render: (object: DataType, open: boolean) => ReactNode;
        GridColDef?: Partial<GridColDef>;
    };
    PreviewPanel?: PreviewPanel<DataType>;
    onRowClick?: (param: GridRowParams<DataType>, event: MuiEvent<MouseEvent>) => boolean | void;
    DataGridProps?: Partial<DataGridProps>;
}
declare const PangeaDataGrid: <DataType extends GridValidRowModel = {
    id: string;
}, FiltersObj extends {
    [key: string]: string;
} = Record<string, string>>({ header, columns, data, loading, Search, ServerPagination, ActionColumn, ExpansionRow, DataGridProps, PreviewPanel, onRowClick, ColumnCustomization, }: PangeaDataGridProps<DataType, FiltersObj>) => JSX.Element;

interface Highlight {
    value: string;
    color: "highlight" | "error";
}

interface Props$2 {
    src: object;
    highlights?: Highlight[];
    depth?: number;
    colors?: {
        highlightBackground: string;
        highlightColor: string;
    };
}
declare const JsonViewer: FC<Props$2>;

interface Props$1 {
    anchorRef: MutableRefObject<HTMLDivElement | null>;
    open: boolean;
    setOpen: (open: boolean) => void;
    variant?: "default" | "purple";
    offsetY?: number;
    offsetX?: number;
    placement?: PopperPlacementType;
    cardSx?: SxProps;
    flatTop?: boolean;
    children?: react__default.ReactNode;
}
declare const PopperCard: FC<Props$1>;

interface TimeRangeObject {
    after?: string;
    before?: string;
    since?: string;
    active?: "after" | "before" | "between" | "since";
}
interface Props {
    value: TimeRangeObject;
    setValue: (value: TimeRangeObject) => void;
    ButtonProps?: Partial<ButtonProps>;
}
declare const TimeRangeSelect: FC<Props>;

declare const useInternalState: (value: any, setValue: any) => any[];

export { ConditionalAutocomplete, FilterFormProps, FilterOptions, JsonViewer, PangeaDataGrid, PangeaDataGridProps, PopperCard as PopoutCard, TimeRangeSelect, useInternalState };
