import PangeaResponse from "../response.js";
import BaseService from "./base.js";
import PangeaConfig from "../config.js";
import { Audit } from "../types.js";
import { PublishedRoots } from "../utils/arweave.js";
/**
 * AuditService class provides methods for interacting with the Audit Service
 * @extends BaseService
 */
declare class AuditService extends BaseService {
    publishedRoots: PublishedRoots;
    prevUnpublishedRootHash: string | undefined;
    constructor(token: string, config: PangeaConfig);
    /**
     * @summary Log an entry
     * @description Create a log entry in the Secure Audit Log.
     * @param {Object} content - A structured event describing an auditable activity. Supported fields are:
     *   - actor (string): Record who performed the auditable activity.
     *   - action (string): The auditable action that occurred.
     *   - status (string): Record whether or not the activity was successful.
     *   - source (string): Used to record the location from where an activity occurred.
     *   - target (string): Used to record the specific record that was targeted by the auditable activity.
     *   - message (string|object): A message describing a detailed account of what happened.
     *     This can be recorded as free-form text or as a JSON-formatted string.
     *   - new (string|object): The value of a record after it was changed.
     *   - old (string|object): The value of a record before it was changed.
     * @param {Object} options - Log options. The following log options are supported:
     *   - verbose (bool): Return a verbose response, including the canonical event hash and received_at time.
     * @returns {Promise} - A promise representing an async call to the log endpoint.
     * @example
     * ```js
     * const auditData = {
     *    action: "add_employee",
     *    actor: user,
     *    target: data.email,
     *    status: "error",
     *    message: `Resume denied - sanctioned country from ${clientIp}`,
     *    source: "web",
     *  };
     *
     *  const logResponse = await audit.log(auditData);
     * ```
     */
    log(content: Audit.Event, options?: Audit.LogOptions): Promise<PangeaResponse<Audit.LogResponse>>;
    processLogResponse(response: PangeaResponse<Audit.LogResponse>, options: Audit.LogOptions): Promise<PangeaResponse<Audit.LogResponse>>;
    verifyHash(envelope: Audit.EventEnvelope | undefined, hash: string | undefined): void;
    /**
     * @summary Search for events
     * @description Search for events that match the provided search criteria.
     * @param {String} query - Natural search string; list of keywords with optional
     *   `<option>:<value>` qualifiers. The following optional qualifiers are supported:
     *   - action:
     *   - actor:
     *   - message:
     *   - new:
     *   - old:
     *   - status:
     *   - target:
     * @param {Object} options - Search options. The following search options are supported:
     *   - limit (number): Maximum number of records to return per page.
     *   - start (string): The start of the time range to perform the search on.
     *   - end (string): The end of the time range to perform the search on. All records up to the latest if left out.
     *   - sources (array): A list of sources that the search can apply to. If empty or not provided, matches only the default source.
     * @returns {Promise} - A promise representing an async call to the search endpoint
     * @example
     * ```js
     * const response = await audit.search("add_employee:Gumby")
     * ```
     */
    search(query: string, queryOptions: Audit.SearchParamsOptions, options: Audit.SearchOptions): Promise<PangeaResponse<Audit.SearchResponse>>;
    /**
     * @summary Results of a search
     * @description Fetch paginated results of a previously executed search
     * @param {String} id - The id of a successful search
     * @param {number} limit (default 20) - The number of results returned
     * @param {number} offset (default 0) - The starting position of the first returned result
     * @param {boolean} verifyResponse (default false) - Verify consistency and membership proof of every record
     * @returns {Promise} - A promise representing an async call to the results endpoint
     * @example
     * ```js
     * const response = await audit.results(pxx_asd0987asdas89a8, 50, 100)
     * ```
     */
    results(id: string, limit: number | undefined, offset: number | undefined, options: Audit.SearchOptions): Promise<PangeaResponse<Audit.ResultResponse>>;
    /**
     * @summary Retrieve tamperproof verification
     * @description Returns current root hash and consistency proof
     * @param {number} size - The size of the tree (the number of records)
     * @returns {Promise} - A promise representing an async call to the results endpoint
     * @example
     * ```js
     * const response = audit.root(7);
     * ```
     */
    root(size?: number): Promise<PangeaResponse<Audit.RootResponse>>;
    processSearchResponse(response: PangeaResponse<Audit.SearchResponse>, options: Audit.SearchOptions): Promise<PangeaResponse<Audit.SearchResponse>>;
}
export default AuditService;
