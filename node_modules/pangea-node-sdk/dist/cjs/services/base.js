"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_js_1 = __importDefault(require("../config.js"));
const request_js_1 = __importDefault(require("../request.js"));
class BaseService {
    /*
    Required:
      - serviceName: name of the service
      - token: a token to use with the service
  
    Optional:
      - config: a PangeaConfig object, uses defaults if non passed
    */
    constructor(serviceName, token, config) {
        if (!serviceName)
            throw new Error("A serviceName is required");
        if (!token)
            throw new Error("A token is required");
        this.serviceName = serviceName;
        this.apiVersion = "v1";
        this.token = token;
        this.config = config || new config_js_1.default();
        this.request = new request_js_1.default(this.serviceName, this.token, this.config);
    }
    get(endpoint, path) {
        return __awaiter(this, void 0, void 0, function* () {
            const fullpath = `${this.apiVersion}/${path}`;
            return yield this.request.get(endpoint, fullpath);
        });
    }
    post(endpoint, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const fullpath = `${this.apiVersion}/${endpoint}`;
            return yield this.request.post(fullpath, data);
        });
    }
}
exports.default = BaseService;
