"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const got_1 = __importStar(require("got"));
const config_js_1 = require("./config.js");
const errors_js_1 = require("./errors.js");
const response_js_1 = require("./response.js");
const delay = (ms) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
});
class PangeaRequest {
    constructor(serviceName, token, config) {
        if (!serviceName)
            throw new Error("A serviceName is required");
        if (!token)
            throw new Error("A token is required");
        this.serviceName = serviceName;
        this.token = token;
        this.config = config;
        this.extraHeaders = {};
    }
    post(endpoint, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = this.getUrl(endpoint);
            const options = {
                headers: this.getHeaders(),
                json: data,
                retry: { limit: this.config.requestRetries },
                responseType: "json",
            };
            try {
                const apiCall = (yield got_1.default.post(url, options));
                if (apiCall.statusCode === 202 && this.config.queuedRetryEnabled) {
                    const body = apiCall.body;
                    const request_id = body === null || body === void 0 ? void 0 : body.request_id;
                    const response = yield this.handleAsync(request_id);
                    return this.checkResponse(response);
                }
                return this.checkResponse(new response_js_1.PangeaResponse(apiCall));
            }
            catch (error) {
                if (error instanceof got_1.HTTPError) {
                    // This MUST throw and error
                    return this.checkResponse(new response_js_1.PangeaResponse(error.response));
                }
                // TODO: add handling of lower level errors?
                throw error;
            }
        });
    }
    get(endpoint, path) {
        return __awaiter(this, void 0, void 0, function* () {
            const fullPath = !path ? endpoint : `${endpoint}/${path}`;
            const url = this.getUrl(fullPath);
            const options = {
                headers: this.getHeaders(),
                retry: { limit: this.config.requestRetries },
                responseType: "json",
            };
            try {
                const response = (yield got_1.default.get(url, options));
                return this.checkResponse(new response_js_1.PangeaResponse(response));
            }
            catch (error) {
                if (error instanceof got_1.HTTPError) {
                    // This MUST throw and error
                    return this.checkResponse(new response_js_1.PangeaResponse(error.response));
                }
                // TODO: add handling of lower level errors?
                throw error;
            }
        });
    }
    handleAsync(requestId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let retryCount = 0;
            while (retryCount < this.config.queuedRetries) {
                retryCount += 1;
                const waitTime = retryCount * retryCount * 500;
                // eslint-disable-next-line no-await-in-loop
                yield delay(waitTime);
                // eslint-disable-next-line no-await-in-loop
                const response = yield this.get("request", requestId);
                if (!(((_a = response.gotResponse) === null || _a === void 0 ? void 0 : _a.statusCode) === 202 && retryCount < this.config.queuedRetries)) {
                    return response;
                }
            }
            console.log("This should never be reached. But it did.");
            // this should never be reached     // FIXME: Why not?
            // @ts-ignore
            return response;
        });
    }
    setExtraHeaders(headers) {
        this.extraHeaders = Object.assign({}, headers);
    }
    getUrl(path) {
        var _a;
        let url;
        if (((_a = this.config) === null || _a === void 0 ? void 0 : _a.environment) == "local") {
            url = `https://${this.config.domain}/${path}`;
        }
        else {
            url = `https://${this.serviceName}.${this.config.domain}/${path}`;
        }
        return url;
    }
    getHeaders() {
        const headers = {
            "Content-Type": "application/json",
            "User-Agent": `pangea-node/${config_js_1.version}`,
            Authorization: `Bearer ${this.token}`,
        };
        if (Object.keys(this.extraHeaders).length > 0) {
            Object.assign(headers, this.extraHeaders);
        }
        return headers;
    }
    checkResponse(response) {
        if (response.success) {
            return response;
        }
        switch (response.status) {
            case "ValidationError":
                throw new errors_js_1.PangeaErrors.ValidationError(response.summary, response);
            case "TooManyRequests":
                throw new errors_js_1.PangeaErrors.RateLimiteError(response.summary, response);
            case "NoCredit":
                throw new errors_js_1.PangeaErrors.NoCreditError(response.summary, response);
            case "Unauthorized":
                throw new errors_js_1.PangeaErrors.UnauthorizedError(this.serviceName, response);
            case "ServiceNotEnabled":
                throw new errors_js_1.PangeaErrors.ServiceNotAvailableError(this.serviceName, response);
            case "ProviderError":
                throw new errors_js_1.PangeaErrors.ProviderError(response.summary, response);
            case "MissingConfigIDScope":
            case "MissingConfigID":
                throw new errors_js_1.PangeaErrors.MissingConfigID(this.serviceName, response);
            case "ServiceNotAvailable":
                throw new errors_js_1.PangeaErrors.ServiceNotAvailableError(this.serviceName, response);
            case "InvalidPayloadReceived":
                throw new errors_js_1.PangeaErrors.InvalidPayloadReceived(response.summary, response);
            default:
                throw new errors_js_1.PangeaErrors.APIError(response.status, response);
        }
    }
}
exports.default = PangeaRequest;
