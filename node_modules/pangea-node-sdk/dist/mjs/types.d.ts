import { Signer } from "utils/signer";
/**
 * PangeaConfig options
 */
export interface ConfigOptions {
    domain?: string;
    environment?: string;
    requestRetries?: number;
    requestTimeout?: number;
    queuedRetryEnabled?: boolean;
    aqueuedRetries?: number;
}
/**
 * Secure Audit interface definitions
 */
export declare namespace Audit {
    interface LogOptions {
        verbose?: boolean;
        signMode?: SignOptions;
        signer?: Signer;
        skipEventVerification?: boolean;
        verify?: boolean;
    }
    interface LogData {
        event: Audit.Event;
        verbose?: boolean;
        signature?: string;
        public_key?: string;
        prev_root?: string;
    }
    enum SignOptions {
        Unsign = 0,
        Local = 1
    }
    interface Event {
        message: Object | string;
        actor?: string;
        action?: string;
        new?: Object | string;
        old?: Object | string;
        status?: string;
        target?: string;
        source?: string;
        timestamp?: Date | string;
    }
    interface EventEnvelope {
        event: Event;
        signature?: string;
        public_key?: string;
        received_at: string;
    }
    interface AuditRecord {
        envelope: Audit.EventEnvelope;
        hash: string;
        membership_proof?: string;
        published?: boolean;
        leaf_index?: string;
        consistency_verification?: string;
        membership_verification?: string;
        signature_verification?: string;
    }
    interface Root {
        url?: string;
        published_at?: string;
        size: number;
        root_hash: string;
        consistency_proof: string[];
        tree_name: string;
    }
    interface LogResponse {
        hash: string;
        envelope: Audit.EventEnvelope;
        unpublished_root?: string;
        membership_proof?: string;
        consistency_proof?: string[];
        consistency_verification?: string;
        membership_verification?: string;
        signature_verification?: string;
    }
    interface SearchOptions {
        verifyConsistency?: boolean;
        skipEventVerification?: boolean;
    }
    interface SearchResponse {
        id: string;
        expires_at: string;
        count: number;
        events: Audit.AuditRecord[];
        root?: Root;
        unpublished_root?: Root;
    }
    interface SearchRestriction {
        actor?: Array<string>;
        action?: Array<string>;
        source?: Array<string>;
        status?: Array<string>;
        target?: Array<string>;
    }
    interface SearchParamsOptions {
        limit?: number;
        max_results?: number;
        start?: string;
        end?: string;
        order?: string;
        order_by?: string;
        search_restriction?: Audit.SearchRestriction;
        verbose?: boolean;
    }
    interface SearchParams extends SearchParamsOptions {
        query: string;
    }
    interface RootParams {
        tree_size?: number;
    }
    interface ResultResponse {
        events: AuditRecord[];
        count: number;
        root?: Root;
    }
    interface RootRequest {
        tree_size?: number;
    }
    interface RootResponse extends Root {
        data: Root;
    }
}
export declare namespace Redact {
    interface BaseResponse {
        redacted_text: string;
        count: number;
    }
    interface StructuredResponse {
        redacted_data: object;
        count: number;
    }
}
export declare namespace Embargo {
    interface Sanction {
        list_name: string;
        embargoed_country_name: string;
        embargoed_country_iso_code: string;
        issuing_country: string;
        annotations: object;
    }
    interface CheckResponse {
        sanctions: Sanction[];
    }
}
/**
 * Intel services interface definitions
 */
export declare namespace Intel {
    interface Options {
        verbose?: boolean;
        raw?: boolean;
        provider?: string;
    }
    interface FileParams extends Intel.Options {
        hash: string;
        hash_type: string;
    }
    interface IPParams extends Intel.Options {
        ip: string;
    }
    interface URLParams extends Intel.Options {
        url: string;
    }
    interface DomainParams extends Intel.Options {
        domain: string;
    }
    interface Response {
        data: {
            category: string[];
            score: number;
            verdict: string;
        };
    }
}
