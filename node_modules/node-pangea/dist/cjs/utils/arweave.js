"use strict";
// Copyright 2021 Pangea Cyber Corporation
// Author: Pangea Cyber Corporation
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getArweavePublishedRoots = void 0;
const got_1 = __importDefault(require("got"));
const ARWEAVE_BASE_URL = "https://arweave.net";
const ARWEAVE_GRAPHQL_URL = `${ARWEAVE_BASE_URL}/graphql`;
const arweaveTransactionUrl = (transactionId) => {
    return `${ARWEAVE_BASE_URL}/${transactionId}/`;
};
const getArweavePublishedRoots = (treeName, treeSizes, fetchRoot) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!treeSizes.length)
        return {};
    const query = `
{
    transactions(
        tags: [
            {
                name: "tree_size"
                values: [${treeSizes.map((size) => `"${size}"`).join(", ")}]
            },
            {
                name: "tree_name"
                values: ["${treeName}"]
            }
        ]
    ) {
        edges {
            node {
                id
                tags {
                    name
                    value
                }
            }
        }
    }
}
    `;
    const options = {
        json: { query },
        responseType: "json",
    };
    const response = (yield got_1.default.post(ARWEAVE_GRAPHQL_URL, options));
    if (response.statusCode !== 200)
        return {};
    const publishedRoots = {};
    const body = response.body;
    const edges = (_c = (_b = (_a = body === null || body === void 0 ? void 0 : body.data) === null || _a === void 0 ? void 0 : _a.transactions) === null || _b === void 0 ? void 0 : _b.edges) !== null && _c !== void 0 ? _c : [];
    for (let idx = 0; idx < edges.length; idx++) {
        const edge = edges[idx];
        const nodeId = (_d = edge === null || edge === void 0 ? void 0 : edge.node) === null || _d === void 0 ? void 0 : _d.id;
        const tags = (_f = (_e = edge === null || edge === void 0 ? void 0 : edge.node) === null || _e === void 0 ? void 0 : _e.tags) !== null && _f !== void 0 ? _f : [];
        const treeSizeTags = tags.filter((tag) => (tag === null || tag === void 0 ? void 0 : tag.name) === "tree_size");
        if (!treeSizeTags.length)
            continue;
        const treeSize = (_g = treeSizeTags[0]) === null || _g === void 0 ? void 0 : _g.value;
        const transactionUrl = arweaveTransactionUrl(nodeId);
        const response = yield got_1.default.get({ url: transactionUrl });
        if (response.statusCode !== 200 || response.statusMessage === "Pending") {
            continue;
        }
        // @ts-ignore
        publishedRoots[treeSize] = Object.assign(Object.assign({}, JSON.parse(response.body)), { transactionId: nodeId });
    }
    for (let idx = 0; idx < treeSizes.length; idx++) {
        const treeSize = treeSizes[idx];
        if (!(treeSize in publishedRoots)) {
            const root = yield fetchRoot(treeSize).catch((err) => {
                console.log("Failed to fetch server roots", err);
            });
            if (root) {
                publishedRoots[treeSize] = Object.assign({}, root);
            }
        }
    }
    return publishedRoots;
});
exports.getArweavePublishedRoots = getArweavePublishedRoots;
