import BaseService from "./base.js";
/**
 * FileIntelService class provides methods for interacting with the File Intel Service
 * @extends BaseService
 *
 * Documentation
 *   https://docs.pangea.cloud/docs/api/file-intel
 *
 * The following information is needed:
 *   PANGEA_TOKEN - service token which can be found on the Pangea User
 *     Console at [https://console.pangea.cloud/project/tokens](https://console.pangea.cloud/project/tokens)
 *   FILE_INTEL_CONFIG_ID - Configuration ID which can be found on the Pangea
 *     User Console at [https://console.pangea.cloud/service/file-intel](https://console.pangea.cloud/service/file-intel)
 *
 * Examples:
 *    import { PangeaConfig, FileIntelService } from "node-pangea";
 *
 *    const domain = process.env.PANGEA_DOMAIN;
 *    const token = process.env.PANGEA_TOKEN;
 *    const configId = process.env.FILE_INTEL_CONFIG_ID;
 *    const config = new PangeaConfig({ domain, configId });
 *
 *    const fileIntel = new FileIntelService(token, config);
 *    const options = { provider: "reversinglabs", verbose: true };
 *
 *    const response = await fileIntel.lookup("142b638c6a60b60c7f9928da4fb85a5a8e1422a9ffdc9ee49e17e56ccca9cf6e", "sha256", options);
 */
export class FileIntelService extends BaseService {
    constructor(token, config) {
        super("file-intel", token, config);
        this.configIdHeaderName = "X-Pangea-File-Intel-Config-ID";
        this.apiVersion = "v1";
        this.init();
    }
    /**
     * @summary Lookup
     * @description Retrieve file reputation from a provider, using the file's hash.
     * @param {String} fileHash - Hash of the file to be looked up
     * @param {String} hashType - Type of hash, can be "sha256", "sha" or "md5"
     * @param {Object} [options] - An object of optional parameters
     *   - @param {String} [provider] - Provider of the reputation information. ("reversinglabs").
     *     Default provider defined by the configuration.
     *   - @param {Boolean} [verbose=false] - Echo back the parameters of the API in the response.
     *   - @param {Boolean} [raw=false] - Return additional details from the provider.
     * @returns {Promise} - A promise representing an async call to the check endpoint
     * @returns {Promise} - A promise representing an async call to the lookup endpoint.
     * @example
     * const options = { provider: "reversinglabs" };
     * const response = await fileIntel.lookup("142b638c6a60b60c7f9928da4fb85a5a8e1422a9ffdc9ee49e17e56ccca9cf6e", "sha256", options);
     */
    lookup(fileHash, hashType, options = {}) {
        const data = {
            hash: fileHash,
            hash_type: hashType,
        };
        if (options?.provider)
            data.provider = options.provider;
        if (options?.verbose)
            data.verbose = options.verbose;
        if (options?.raw)
            data.raw = options.raw;
        return this.post("lookup", data);
    }
}
/**
 * DomainIntelService class provides methods for interacting with the Domain Intel Service
 * @extends BaseService
 *
 * Documentation
 *   https://docs.pangea.cloud/docs/api/domain-intel
 *
 * The following information is needed:
 *   PANGEA_TOKEN - service token which can be found on the Pangea User
 *     Console at [https://console.pangea.cloud/project/tokens](https://console.pangea.cloud/project/tokens)
 *   DOMAIN_INTEL_CONFIG_ID - Configuration ID which can be found on the Pangea
 *     User Console at [https://console.pangea.cloud/service/domain-intel](https://console.pangea.cloud/service/domain-intel)
 *
 * Examples:
 *  import { PangeaConfig, DomainIntelService } from "node-pangea";
 *
 *  const domain = process.env.PANGEA_DOMAIN;
 *  const token = process.env.PANGEA_TOKEN;
 *  const configId = process.env.DOMAIN_INTEL_CONFIG_ID;
 *  const config = new PangeaConfig({ domain, configId });
 *
 *  const domainIntel = new DomainIntelService(token, config);
 *  const options = { provider: "domaintools", verbose: true };
 *
 *  const response = await domainIntel.lookup("teoghehofuuxo", options);
 */
export class DomainIntelService extends BaseService {
    constructor(token, config) {
        super("domain-intel", token, config);
        this.configIdHeaderName = "X-Pangea-Domain-Intel-Config-ID";
        this.apiVersion = "v1";
        this.init();
    }
    /**
     * @summary Lookup
     * @description Retrieve Domain reputation from a provider.
     * @param {String} domain - Domain address to be looked up.
     * @param {Object} [options] - An object of optional parameters.
     *   - @param {String} [provider] - Provider of the reputation information. ("reversinglabs" or "domaintools").
     *     Default provider defined by the configuration.
     *   - @param {Boolean} [verbose=false] - Echo back the parameters of the API in the response.
     *   - @param {Boolean} [raw=false] - Return additional details from the provider.
     * @returns {Promise} - A promise representing an async call to the check endpoint.
     * @example
     * const response = await domainIntel.loookup("google.com")
     */
    lookup(domain, options = {}) {
        const data = {
            domain,
        };
        if (options?.provider)
            data.provider = options.provider;
        if (options?.verbose)
            data.verbose = options.verbose;
        if (options?.raw)
            data.raw = options.raw;
        return this.post("lookup", data);
    }
}
