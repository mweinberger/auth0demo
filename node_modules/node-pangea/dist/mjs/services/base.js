import PangeaConfig from "../config.js";
import PangeaRequest from "../request.js";
class BaseService {
    serviceName;
    token;
    configIdHeaderName;
    apiVersion;
    config;
    request;
    /*
    Required:
      - serviceName: name of the service
      - token: a token to use with the service
  
    Optional:
      - config: a PangeaConfig object, uses defaults if non passed
    */
    constructor(serviceName, token, config) {
        if (!serviceName)
            throw new Error("A serviceName is required");
        if (!token)
            throw new Error("A token is required");
        this.configIdHeaderName = "";
        this.serviceName = serviceName;
        this.apiVersion = "v1";
        this.token = token;
        this.config = config || new PangeaConfig();
        this.request = new PangeaRequest(this.serviceName, this.token, this.config);
    }
    /*
    The init function should be called by any service implementations to initialize custom headers
    */
    init() {
        if (this.config.configId && this.configIdHeaderName) {
            const configIdHeader = {
                [this.configIdHeaderName]: this.config.configId,
            };
            this.request.setExtraHeaders(configIdHeader);
        }
    }
    async get(endpoint, path) {
        const fullpath = `${this.apiVersion}/${path}`;
        return await this.request.get(endpoint, fullpath);
    }
    async post(endpoint, data) {
        const fullpath = `${this.apiVersion}/${endpoint}`;
        return await this.request.post(fullpath, data);
    }
}
export default BaseService;
